#!/usr/bin/env ts-node
"use strict";Object.defineProperty(exports,Symbol.toStringTag,{value:"Module"});const c=require("playwright");var l=typeof document<"u"?document.currentScript:null;async function f(){console.log("Checking Playwright installation...");try{return await(await c.chromium.launch({headless:!0})).close(),console.log("✅ Playwright is working correctly"),!0}catch(e){return console.error("❌ Error with Playwright:",e.message),console.log("You may need to install browser binaries using: npx playwright install chromium"),!1}}async function a(){console.log("Checking environment for scraper");let e=!0;const o=process.versions.node;return console.log(`Node.js version: ${o}`),e=await f()&&e,console.log(e?`
✅ All checks passed! Environment is ready for scraping.`:`
❌ Some checks failed. Please fix the issues above before running the scraper.`),e}process.argv[1]===new URL(typeof document>"u"?require("url").pathToFileURL(__filename).href:l&&l.tagName.toUpperCase()==="SCRIPT"&&l.src||new URL("scrape-election-results.js",document.baseURI).href).pathname&&a().catch(console.error);const h="https://blob-prod-senator.abs-cbn.com/feed-0/senator-00399000-nation-location-1.json",p="https://blob-prod-party-list.abs-cbn.com/feed-0/party-list-01199000-nation-location-1.json";async function i(e){console.log(`Starting to fetch ${e} election results...`),await a()||(console.error("Environment checks failed. Please fix the issues before running the scraper."),process.exit(1)),console.log("Launching browser... headless set to false to avoid 403 error");const r=await c.chromium.launch({headless:!1}),u=await r.newContext({userAgent:"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"});try{const n=await u.newPage();let t;if(e==="senator")t=h,console.log(`Fetching senator results from ${t}...`);else if(e==="partylist")t=p,console.log(`Fetching party list results from ${t}...`);else return console.error("Invalid result type provided to scraper."),null;const s=await n.goto(t);if(s&&s.ok()){const g=await s.json();return console.log(`✅ Successfully fetched ${e} results.`),g}else return console.error(`❌ Failed to fetch ${e} results: ${s==null?void 0:s.status()}`),null}catch(n){return console.error(`Error during scraping ${e} results:`,n),null}finally{await r.close(),console.log("Browser closed.")}}async function d(){const e=process.argv.slice(2);let o;e.includes("--senator")?o="senator":e.includes("--partylist")&&(o="partylist"),o||(console.error('Please specify the result type using "--senator" or "--partylist".'),process.exit(1));const r=await i(o);r?console.log(JSON.stringify(r,null,2)):(console.error(`Failed to scrape ${o} results.`),process.exit(1))}d();exports.scrapeElectionResults=i;
